Leetcode question solved:-
class Solution {
public:
    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
        vector<vector<int>> dist(n,vector<int>(n,INT_MAX));
        vector<pair<int,int>> adj[n];
        for(auto it:edges)
        {
            adj[it[0]].push_back({it[1],it[2]});
            adj[it[1]].push_back({it[0],it[2]});
        }
        for(int i=0;i<n;i++)
        {
            pq.push({0,i});
            while(!pq.empty())
            {
                int dis=pq.top().first;
                int node=pq.top().second;
                pq.pop();
                for(auto it:adj[node])
                {
                    if(it.second+dis<dist[i][it.first])
                    {
                        dist[i][it.first]=it.second+dis;
                        pq.push({dist[i][it.first],it.first});
                    }
                }
            }
        }
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++){
                if(i==j)
                    dist[i][j]=0;
            }
        }
        int ans=n;
        int city=-1;
        for(int i=0;i<n;i++)
        {
            int cnt=0;
            for(int j=0;j<n;j++)
            {
                    if(dist[i][j]<=distanceThreshold)
                    {
                        cnt++;
                    }
            }
                if(cnt<=ans)
                {
                    ans=cnt;
                    city=i;
                }
            }
        return city;
    }
};